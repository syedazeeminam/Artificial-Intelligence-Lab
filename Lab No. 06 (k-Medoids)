{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPHPe7szQEQ/GLXCOp43tZ6"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"zB9HGxlGwKos"},"outputs":[],"source":["class KMedoidsClass:\n","    def __init__(self,data,k,iters):\n","        self.data= data\n","        self.k = k\n","        self.iters = iters\n","        self.medoids = np.array([data[i] for i in range(self.k)])\n","        self.colors = np.array(np.random.randint(0, 255, size =(self.k, 4)))/255\n","        self.colors[:,3]=1\n","\n","    def manhattan(self,p1, p2):\n","        return np.abs((p1[0]-p2[0])) + np.abs((p1[1]-p2[1]))\n","\n","    def get_costs(self, medoids, data):\n","        tmp_clusters = {i:[] for i in range(len(medoids))}\n","        cst = 0\n","        for d in data:\n","            dst = np.array([self.manhattan(d, md) for md in medoids])\n","            c = dst.argmin()\n","            tmp_clusters[c].append(d)\n","            cst+=dst.min()\n","\n","        tmp_clusters = {k:np.array(v) for k,v in tmp_clusters.items()}\n","        return tmp_clusters, cst\n","\n","    def fit(self):\n","\n","        samples,_ = self.data.shape\n","\n","        self.clusters, cost = self.get_costs(data=self.data, medoids=self.medoids)\n","        count = 0\n","\n","        colors =  np.array(np.random.randint(0, 255, size =(self.k, 4)))/255\n","        colors[:,3]=1\n","\n","        plt.title(f\"Step : 0\")\n","        [plt.scatter(self.clusters[t][:, 0], self.clusters[t][:, 1], marker=\"*\", s=100,\n","                                        color = colors[t]) for t in range(self.k)]\n","        plt.scatter(self.medoids[:, 0], self.medoids[:, 1], s=200, color=colors)\n","        plt.show()\n","\n","        while True:\n","            swap = False\n","            for i in range(samples):\n","                if not i in self.medoids:\n","                    for j in range(self.k):\n","                        tmp_meds = self.medoids.copy()\n","                        tmp_meds[j] = i\n","                        clusters_, cost_ = self.get_costs(data=self.data, medoids=tmp_meds)\n","\n","                        if cost_<cost:\n","                            self.medoids = tmp_meds\n","                            cost = cost_\n","                            swap = True\n","                            self.clusters = clusters_\n","                            print(f\"Medoids Changed to: {self.medoids}.\")\n","                            plt.title(f\"Step : {count+1}\")\n","                            [plt.scatter(self.clusters[t][:, 0], self.clusters[t][:, 1], marker=\"*\", s=100,\n","                                        color = colors[t]) for t in range(self.k)]\n","                            plt.scatter(self.medoids[:, 0], self.medoids[:, 1], s=200, color=colors)\n","                            plt.show()\n","            count+=1\n","\n","            if count>=self.iters:\n","                print(\"End of the iterations.\")\n","                break\n","            if not swap:\n","                print(\"No changes.\")\n","                break"]},{"cell_type":"code","source":["import numpy as np\n","import matplotlib.pyplot as plt\n","dt = np.random.randint(0,100, (100,2))\n","kmedoid = KMedoidsClass(dt,5,5)\n","kmedoid.fit()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000,"output_embedded_package_id":"11ab2RzR0vNXP1uPKhZ3ZsrFuNDfP5yKN"},"id":"-4Q3I9mOxJPn","executionInfo":{"status":"ok","timestamp":1697615599341,"user_tz":420,"elapsed":23892,"user":{"displayName":"Syed Azeem Inam","userId":"04997696331865265307"}},"outputId":"a9c9e618-60b3-4130-9f9e-b2ecff43215e"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":"Output hidden; open in https://colab.research.google.com to view."},"metadata":{}}]},{"cell_type":"code","source":[],"metadata":{"id":"Acyt5fSOxW2O"},"execution_count":null,"outputs":[]}]}